// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// connect_
CharacterVector connect_(CharacterVector keywords, CharacterVector values);
RcppExport SEXP _rpg_connect_(SEXP keywordsSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type keywords(keywordsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(connect_(keywords, values));
    return rcpp_result_gen;
END_RCPP
}
// ping
CharacterVector ping(const char* opts);
RcppExport SEXP _rpg_ping(SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(ping(opts));
    return rcpp_result_gen;
END_RCPP
}
// disconnect_
void disconnect_();
RcppExport SEXP _rpg_disconnect_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    disconnect_();
    return R_NilValue;
END_RCPP
}
// clean_up_all
void clean_up_all();
RcppExport SEXP _rpg_clean_up_all() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    clean_up_all();
    return R_NilValue;
END_RCPP
}
// get_conn_error
CharacterVector get_conn_error();
RcppExport SEXP _rpg_get_conn_error() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_conn_error());
    return rcpp_result_gen;
END_RCPP
}
// get_conn_info_
SEXP get_conn_info_();
RcppExport SEXP _rpg_get_conn_info_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_conn_info_());
    return rcpp_result_gen;
END_RCPP
}
// result_dim
IntegerVector result_dim();
RcppExport SEXP _rpg_result_dim() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(result_dim());
    return rcpp_result_gen;
END_RCPP
}
// get_tuple_info
IntegerMatrix get_tuple_info();
RcppExport SEXP _rpg_get_tuple_info() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_tuple_info());
    return rcpp_result_gen;
END_RCPP
}
// query
CharacterVector query(const char* sql, SEXP pars);
RcppExport SEXP _rpg_query(SEXP sqlSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(query(sql, pars));
    return rcpp_result_gen;
END_RCPP
}
// query_error
CharacterVector query_error();
RcppExport SEXP _rpg_query_error() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(query_error());
    return rcpp_result_gen;
END_RCPP
}
// fetch_matrix
CharacterMatrix fetch_matrix();
RcppExport SEXP _rpg_fetch_matrix() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fetch_matrix());
    return rcpp_result_gen;
END_RCPP
}
// fetch_dataframe
List fetch_dataframe();
RcppExport SEXP _rpg_fetch_dataframe() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fetch_dataframe());
    return rcpp_result_gen;
END_RCPP
}
// trace_conn
void trace_conn(const char* filename, bool append);
RcppExport SEXP _rpg_trace_conn(SEXP filenameSEXP, SEXP appendSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< bool >::type append(appendSEXP);
    trace_conn(filename, append);
    return R_NilValue;
END_RCPP
}
// untrace_conn
void untrace_conn(bool remove);
RcppExport SEXP _rpg_untrace_conn(SEXP removeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type remove(removeSEXP);
    untrace_conn(remove);
    return R_NilValue;
END_RCPP
}
// trace_filename
const char* trace_filename();
RcppExport SEXP _rpg_trace_filename() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(trace_filename());
    return rcpp_result_gen;
END_RCPP
}
// get_conn_defaults
List get_conn_defaults(const bool all);
RcppExport SEXP _rpg_get_conn_defaults(SEXP allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const bool >::type all(allSEXP);
    rcpp_result_gen = Rcpp::wrap(get_conn_defaults(all));
    return rcpp_result_gen;
END_RCPP
}
// libpq_version
int libpq_version();
RcppExport SEXP _rpg_libpq_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(libpq_version());
    return rcpp_result_gen;
END_RCPP
}
// encrypt_password
const char* encrypt_password(const char* passwd, const char* user);
RcppExport SEXP _rpg_encrypt_password(SEXP passwdSEXP, SEXP userSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type passwd(passwdSEXP);
    Rcpp::traits::input_parameter< const char* >::type user(userSEXP);
    rcpp_result_gen = Rcpp::wrap(encrypt_password(passwd, user));
    return rcpp_result_gen;
END_RCPP
}
// get_encoding
const char* get_encoding();
RcppExport SEXP _rpg_get_encoding() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_encoding());
    return rcpp_result_gen;
END_RCPP
}
// set_encoding
bool set_encoding(const char* encoding);
RcppExport SEXP _rpg_set_encoding(SEXP encodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type encoding(encodingSEXP);
    rcpp_result_gen = Rcpp::wrap(set_encoding(encoding));
    return rcpp_result_gen;
END_RCPP
}
// set_error_verbosity
void set_error_verbosity(std::string verbosity);
RcppExport SEXP _rpg_set_error_verbosity(SEXP verbositySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type verbosity(verbositySEXP);
    set_error_verbosity(verbosity);
    return R_NilValue;
END_RCPP
}
// check_transaction
bool check_transaction();
RcppExport SEXP _rpg_check_transaction() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(check_transaction());
    return rcpp_result_gen;
END_RCPP
}
// prepare_
CharacterVector prepare_(const char* sql, const char* name);
RcppExport SEXP _rpg_prepare_(SEXP sqlSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< const char* >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(prepare_(sql, name));
    return rcpp_result_gen;
END_RCPP
}
// execute_prepared_
SEXP execute_prepared_(CharacterMatrix pars, const char* name);
RcppExport SEXP _rpg_execute_prepared_(SEXP parsSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const char* >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(execute_prepared_(pars, name));
    return rcpp_result_gen;
END_RCPP
}
// num_prepared_params
int num_prepared_params(const char* name);
RcppExport SEXP _rpg_num_prepared_params(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(num_prepared_params(name));
    return rcpp_result_gen;
END_RCPP
}
// push_conn
void push_conn();
RcppExport SEXP _rpg_push_conn() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    push_conn();
    return R_NilValue;
END_RCPP
}
// pop_conn
void pop_conn();
RcppExport SEXP _rpg_pop_conn() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    pop_conn();
    return R_NilValue;
END_RCPP
}
// swap_conn
void swap_conn();
RcppExport SEXP _rpg_swap_conn() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    swap_conn();
    return R_NilValue;
END_RCPP
}
// rotate_stack
void rotate_stack(const int n);
RcppExport SEXP _rpg_rotate_stack(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rotate_stack(n);
    return R_NilValue;
END_RCPP
}
// show_conn_stack
List show_conn_stack();
RcppExport SEXP _rpg_show_conn_stack() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(show_conn_stack());
    return rcpp_result_gen;
END_RCPP
}
// async_query
bool async_query(const char* sql, SEXP pars);
RcppExport SEXP _rpg_async_query(SEXP sqlSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(async_query(sql, pars));
    return rcpp_result_gen;
END_RCPP
}
// async_status
CharacterVector async_status();
RcppExport SEXP _rpg_async_status() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(async_status());
    return rcpp_result_gen;
END_RCPP
}
// is_busy
bool is_busy();
RcppExport SEXP _rpg_is_busy() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_busy());
    return rcpp_result_gen;
END_RCPP
}
// cancel
void cancel();
RcppExport SEXP _rpg_cancel() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cancel();
    return R_NilValue;
END_RCPP
}
// finish_async
void finish_async();
RcppExport SEXP _rpg_finish_async() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    finish_async();
    return R_NilValue;
END_RCPP
}
// exec_param_serialize
CharacterVector exec_param_serialize(const char* sql, SEXP obj);
RcppExport SEXP _rpg_exec_param_serialize(SEXP sqlSEXP, SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(exec_param_serialize(sql, obj));
    return rcpp_result_gen;
END_RCPP
}
// fetch_stowed
List fetch_stowed(const char* sql, const char* par);
RcppExport SEXP _rpg_fetch_stowed(SEXP sqlSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< const char* >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(fetch_stowed(sql, par));
    return rcpp_result_gen;
END_RCPP
}
// register_return_formatter
void register_return_formatter(int pgoid, Function f);
RcppExport SEXP _rpg_register_return_formatter(SEXP pgoidSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pgoid(pgoidSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    register_return_formatter(pgoid, f);
    return R_NilValue;
END_RCPP
}
// toggle_echo
void toggle_echo();
RcppExport SEXP _rpg_toggle_echo() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    toggle_echo();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rpg_connect_", (DL_FUNC) &_rpg_connect_, 2},
    {"_rpg_ping", (DL_FUNC) &_rpg_ping, 1},
    {"_rpg_disconnect_", (DL_FUNC) &_rpg_disconnect_, 0},
    {"_rpg_clean_up_all", (DL_FUNC) &_rpg_clean_up_all, 0},
    {"_rpg_get_conn_error", (DL_FUNC) &_rpg_get_conn_error, 0},
    {"_rpg_get_conn_info_", (DL_FUNC) &_rpg_get_conn_info_, 0},
    {"_rpg_result_dim", (DL_FUNC) &_rpg_result_dim, 0},
    {"_rpg_get_tuple_info", (DL_FUNC) &_rpg_get_tuple_info, 0},
    {"_rpg_query", (DL_FUNC) &_rpg_query, 2},
    {"_rpg_query_error", (DL_FUNC) &_rpg_query_error, 0},
    {"_rpg_fetch_matrix", (DL_FUNC) &_rpg_fetch_matrix, 0},
    {"_rpg_fetch_dataframe", (DL_FUNC) &_rpg_fetch_dataframe, 0},
    {"_rpg_trace_conn", (DL_FUNC) &_rpg_trace_conn, 2},
    {"_rpg_untrace_conn", (DL_FUNC) &_rpg_untrace_conn, 1},
    {"_rpg_trace_filename", (DL_FUNC) &_rpg_trace_filename, 0},
    {"_rpg_get_conn_defaults", (DL_FUNC) &_rpg_get_conn_defaults, 1},
    {"_rpg_libpq_version", (DL_FUNC) &_rpg_libpq_version, 0},
    {"_rpg_encrypt_password", (DL_FUNC) &_rpg_encrypt_password, 2},
    {"_rpg_get_encoding", (DL_FUNC) &_rpg_get_encoding, 0},
    {"_rpg_set_encoding", (DL_FUNC) &_rpg_set_encoding, 1},
    {"_rpg_set_error_verbosity", (DL_FUNC) &_rpg_set_error_verbosity, 1},
    {"_rpg_check_transaction", (DL_FUNC) &_rpg_check_transaction, 0},
    {"_rpg_prepare_", (DL_FUNC) &_rpg_prepare_, 2},
    {"_rpg_execute_prepared_", (DL_FUNC) &_rpg_execute_prepared_, 2},
    {"_rpg_num_prepared_params", (DL_FUNC) &_rpg_num_prepared_params, 1},
    {"_rpg_push_conn", (DL_FUNC) &_rpg_push_conn, 0},
    {"_rpg_pop_conn", (DL_FUNC) &_rpg_pop_conn, 0},
    {"_rpg_swap_conn", (DL_FUNC) &_rpg_swap_conn, 0},
    {"_rpg_rotate_stack", (DL_FUNC) &_rpg_rotate_stack, 1},
    {"_rpg_show_conn_stack", (DL_FUNC) &_rpg_show_conn_stack, 0},
    {"_rpg_async_query", (DL_FUNC) &_rpg_async_query, 2},
    {"_rpg_async_status", (DL_FUNC) &_rpg_async_status, 0},
    {"_rpg_is_busy", (DL_FUNC) &_rpg_is_busy, 0},
    {"_rpg_cancel", (DL_FUNC) &_rpg_cancel, 0},
    {"_rpg_finish_async", (DL_FUNC) &_rpg_finish_async, 0},
    {"_rpg_exec_param_serialize", (DL_FUNC) &_rpg_exec_param_serialize, 2},
    {"_rpg_fetch_stowed", (DL_FUNC) &_rpg_fetch_stowed, 2},
    {"_rpg_register_return_formatter", (DL_FUNC) &_rpg_register_return_formatter, 2},
    {"_rpg_toggle_echo", (DL_FUNC) &_rpg_toggle_echo, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rpg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
